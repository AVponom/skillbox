import asyncio
from asyncio import transports
from typing import Optional


class ClientProtocol(asyncio.Protocol):
    login: str
    server: 'Server'
    transport: transports.Transport

    def __init__(self, server: 'Server'):
        self.server = server
        self.login = None

    def send_history(self):
        for message in self.server.history:
            self.transport.write(message.encode())

    def data_received(self, data: bytes):
        decoded = data.decode()
        print(decoded)
        if self.login is None:
            # login
            if decoded.startswith("login:"):
                newlogin = decoded.replace("login:", "").replace("\r\n", "")
                login_is_free=True
                for client in  self.server.clients:
                    if newlogin==client.login:
                        login_is_free = False
                        break
                if login_is_free:
                    self.login = newlogin
                    self.transport.write(f"Hey, {self.login}!".encode())
                    self.send_history()
                else:
                    self.transport.write(f"Логин, {newlogin} уже занят".encode())



        else:
            self.send_message(decoded)


    def send_message(self, message):
        format_string = f"<{self.login}> {message}"
        encoded = format_string.encode()

        self.server.history.append(format_string+"\r\n")
        if len(self.server.history) > 10:
            self.server.history.remove(0)

        for client in self.server.clients:
            if client.login != self.login:
                client.transport.write(encoded)

    def connection_made(self, transport: transports.Transport):
        self.transport = transport
        self.server.clients.append(self)
        print("Соединение утановлено")

    def connection_lost(self, exception):
        print("Соединение разорвано")




class Server:
    clients: list
    history: list

    def __init__(self):
        self.clients = []
        self.history=[]

    def create_protocol(self):
        return ClientProtocol(self)

    async def start(self):
        loop = asyncio.get_event_loop()
        couroutine = await loop.create_server(self.create_protocol, "127.0.0.1", 8888, )
        print("Server started")
        await couroutine.serve_forever()


process = Server()
try:
    asyncio.run(process.start())
except KeyboardInterrupt:
    print ("Сервер остановлен вручную")
